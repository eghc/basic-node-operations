#1 Run the commands sort, wc and uniq on the commands.js file. Explain how they work and what the output was.
sort - Sorts the lines by alphabetical order. When run on commands.js file, the lines with the most leading spaces will be first since it is smaller than most other characters in ASCII. I imagine it works by converting all lines to strings and then uses a sorting algorithm to compare and sort the strings.

wc - Prints out line count, some spaces, word count, some spaces, byte count, some paces, and then the name of the file. It probably takes only one pass through the file and counts as it goes. For example, it sees the line 'let a = 1;' so it adds 1 to the line count, 3 to the word count, 10 to the byte count.

uniq - Prints the unique lines to the ones surrounding it. For example, it will remove one of the "a" lines if the file is like so: "a\n a\n "
But it will not remove a line if the file is like so: "a\n b\n a\n "


#2 Using the pipe (|) connect at least two commands and run it on commands.js. Explain what the output was and why the specific data was outputted.
I tried tho following:
sort commands.js | uniq | wc

It sorted the lines in commands.js, returned the uniq lines, and then counted the words, lines, and bytes. This was useful in seeing how much repeating code was in the file.


#6 In this checkpoint, you encountered built-in JavaScript methods as well as the new ES6 syntax. Review the information below before attempting the programming challenge.

function reverseString(inputString) {
  let arr = inputString.split('');
  arr.reverse();
  return arr.join('');
}